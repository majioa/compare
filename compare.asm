.MODEL	SMALL
.286
.STACK	100H
CODE	SEGMENT PARA
ASSUME	CS:CODE,SS:STACK,DS:DATA

FF	EQU	DATA+(EDS-CREDITS+15)/16
SF	EQU	FF+1000H
NF	EQU	SF+1000H

DATS	EQU	CS:[DATA_SEG]
FFS	EQU	CS:[FF_SEG]
SFS	EQU	CS:[SF_SEG]
NFS	EQU	CS:[NF_SEG]

START	PROC
	PUSH	DS
	MOV	DS,DATS
	LEA	SI,CREDITS
	CALL	WW
	POP	DS
	LEA	AX,FT1
	LEA	BX,ST1
	LEA	DX,OUTT
	MOV	ES,DATS
	MOV	SI,80H
	LEA	DI,FBUF
	CALL	RL
	MOV	DS,DATS
	JC	USE
	CMP	CX,2
	JB	USE
	CMP	CX,3
	JA	USE
	TEST	DS:[OUTT],1
	JZ	COMPP11
	OR	BYTE PTR DS:[FLAGS],1000B
COMPP11:
	CALL	COMP
	TEST	BYTE PTR DS:[FLAGS],1
	JZ	CRED
	LEA	SI,REP_
	CALL	WW
	LEA	DX,FBUF
	CALL	SEEK_NEXT_FNAME
	CALL	SEEK_NEXT_FNAME
	MOV	SI,DX
	CALL	WW
	CALL	WENTER
CRED:
	MOV	AX,4C00H
	INT	21H
USE:
	LEA	SI,USING
	CALL	WW
	JMP	SHORT	CRED
ENDP
COMP	PROC
	CMP	CX,2
	JE	COMP1
	OR	BYTE PTR DS:[FLAGS],1
COMP1:
	LEA	DX,FBUF
	CALL	OPEN_FILE
	JC	FILE_ERR
	MOV	DS:[LOG1],AX
	CALL	SEEK_NEXT_FNAME
	CALL	OPEN_FILE
	JC	FILE_ERR
	MOV	DS:[LOG2],AX
	TEST	BYTE PTR DS:[FLAGS],1
	JZ	COMP2
	CALL	SEEK_NEXT_FNAME
	MOV	DS:[SAVEF_NAME_ADRESS],DX
COMP2:
	CALL	COMPARE
	CLC
	MOV	BX,DS:[LOG2]
	CALL	CLOSE_FILE
	JC	FILE_ERR
	MOV	BX,DS:[LOG1]
	CALL	CLOSE_FILE
	JC	FILE_ERR
	RET
FILE_ERR:
	LEA	SI,ERRORF
	CALL	WW
	MOV	AX,4CFFH
	INT	21H
ENDP
SEEK_NEXT_FNAME PROC
	PUSH	SI
	MOV	SI,DX
SEEK_NEXT_FNAME1:
	LODSB
	OR	AL,AL
	JNZ	SEEK_NEXT_FNAME1
	MOV	DX,SI
	POP	SI
	RET
ENDP
COMPARE PROC
	PUSH	DS
COMPARE1:
	CALL	READ_RECORDS;OUT CX - LEN REC;C=1 - ENDF
	CALL	COMPARE_RECORDS
	JNC	COMPARE1
	TEST	BYTE PTR ES:[FLAGS],10B
	JZ	COMPARE1_EXIT
	CALL	OUTFILE2
	CALL	OUTENTER
COMPARE1_EXIT:
	CALL	PRINT_OUT
	PUSH	ES
	POP	DS
	TEST	BYTE PTR DS:[FLAGS],100000B
	JNZ	COMPARE2
	LEA	SI,FA
	CALL	WW
	LEA	SI,FBUF
	CALL	WW
	PUSH	SI
	LEA	SI,AND_
	CALL	WW
	POP	SI
	CALL	WW
	LEA	SI,IDENT
	CALL	WW
COMPARE2:
	POP	DS
	RET
ENDP
RECOPYOK	PROC
	XOR	CX,CX
	MOV	ES,NFS
	XOR	DI,DI
	LEA	SI,FA
	CALL	WF
	LEA	SI,FBUF
	CALL	WF
	PUSH	SI
	LEA	SI,AND_
	CALL	WF
	POP	SI
	CALL	WF
	LEA	SI,IDENT
	CALL	WF
	RET
ENDP
WF	PROC
	PUSH	AX
WF1:
	LODSB
	OR	AL,AL
	JZ	WF2
	STOSB
	INC	CX
	JMP	SHORT	WF1
WF2:
	POP	AX
	RET
ENDP
SAVEOK	PROC
	PUSH	DS
	PUSH	DX
	PUSH	ES
	MOV	BX,DS:[LOG3]
	POP	DS
	XOR	DX,DX
	CALL	WRITE_FILE
	POP	DX
	POP	DS
	RET
ENDP
READ_RECORDS	PROC
	MOV	DS,DATS
	MOV	BX,DS:[LOG2]
	PUSH	BX
	MOV	BX,DS:[LOG1]
	MOV	CX,0FFFFH
	MOV	DS,FFS
	XOR	DX,DX
	PUSH	CX
	CALL	READ_FILE
	POP	CX
	POP	BX
	JC	READ_R_ERR
	PUSH	AX
	MOV	DS,SFS
	XOR	DX,DX
	CALL	READ_FILE
	POP	BX
	JC	READ_R_ERR
	CMP	AX,BX
	JB	READ_RECORDS1
	MOV	AX,BX
READ_RECORDS1:
	MOV	CX,AX
	CMP	AX,0FFFFH
	RET
READ_R_ERR:
	POP	BX
	POP	DS
	POP	BX
	JMP	FILE_ERR
ENDP
COMPARE_RECORDS PROC
	PUSHA
	PUSHF
	XOR	SI,SI
	XOR	DI,DI
	MOV	DS,FFS
	MOV	ES,DATS
COMPARER3:
	LODSB
	PUSH	DS
	MOV	DS,SFS
	CMP	AL,DS:[DI]
	POP	DS
	JZ	COMPARER_EQUAL
	OR	BYTE PTR ES:[FLAGS],10000B
	TEST	BYTE PTR ES:[FLAGS],10B
	JZ	COMPARER_FIRST
	OR	BYTE PTR ES:[FLAGS],100B
	JMP	SHORT	COMPARER_NEXT
COMPARER_FIRST:
	CALL	OUTFILE1;IN DS:DI - SEL
	OR	BYTE PTR ES:[FLAGS],10B
	JMP	SHORT	COMPARER_NEXT
COMPARER_EQUAL:
	TEST	BYTE PTR ES:[FLAGS],10B
	JZ	COMPARER_NEXT
	TEST	BYTE PTR ES:[FLAGS],100B
	JZ	COMPARER_NEXT1
	CALL	OUTFILE2
	JMP	SHORT	COMPARER_NEXT2
COMPARER_NEXT1:
	CALL	OUTENTER
COMPARER_NEXT2:
	AND	BYTE PTR ES:[FLAGS],11111001B
COMPARER_NEXT:
	INC	DI
	ADD	ES:[LOWSELECTOR],1
	ADC	ES:[HIGHSELECTOR],0
	LOOP	COMPARER3
	POPF
	POPA
	RET
ENDP
OUTFILE2	PROC
	PUSH	AX
	PUSH	SI
	PUSH	DI
	PUSH	DS
	MOV	DS,DATS
	LEA	SI,TIRE
	CALL	OUTSTRING
	MOV	DI,ES:[LOWSELECTOR]
	SUB	DI,1
	MOV	AX,ES:[HIGHSELECTOR]
	SBB	AX,0
	CALL	OUTNUM
	MOV	AX,DI
	CALL	OUTNUM
	CALL	OUTENTER
	POP	DS
	POP	DI
	POP	SI
	POP	AX
	RET
ENDP
OUTFILE1	PROC
	PUSH	AX
	MOV	AX,ES:[HIGHSELECTOR]
	CALL	OUTNUM
	MOV	AX,ES:[LOWSELECTOR]
	CALL	OUTNUM
	POP	AX
	RET
ENDP
OUTSTRING	PROC
	PUSH	AX
	PUSH	DX
	PUSH	SI
	PUSH	DI
	PUSH	ES
	MOV	DI,ES:[SELECT_OUT]
	MOV	ES,NFS
	XOR	DX,DX
OUTSTRING1:
	LODSB
	OR	AL,AL
	JZ	OUTSTRING2
	STOSB
	INC	DX
	JMP	SHORT	OUTSTRING1
OUTSTRING2:
	POP	ES
	MOV	ES:[SELECT_OUT],DI
	POP	DI
	POP	SI
	ADD	ES:[NUMBER_OUTL],DX
	ADC	WORD PTR ES:[NUMBER_OUTH],0
	POP	DX
	POP	AX
	RET
ENDP
OUTNUM	PROC
	PUSH	AX
	PUSH	CX
	PUSH	DX
	PUSH	DI
	PUSH	ES
	MOV	DI,ES:[SELECT_OUT]
	MOV	ES,NFS
	MOV	CX,4
	MOV	DX,AX
OUTNUM2:
	ROL	DX,4
	MOV	AX,DX
	AND	AL,0FH
	ADD	AL,30H
	CMP	AL,3AH
	JB	OUTNUM1
	ADD	AL,(41H-3AH)
OUTNUM1:
	STOSB
	LOOP	OUTNUM2
	POP	ES
	MOV	ES:[SELECT_OUT],DI
	POP	DI
	POP	DX
	POP	CX
	POP	AX
	ADD	WORD PTR ES:[NUMBER_OUTL],4
	ADC	WORD PTR ES:[NUMBER_OUTH],0
	RET
ENDP
OUTENTER	PROC
	PUSH	AX
	PUSH	DI
	PUSH	ES
	MOV	DI,ES:[SELECT_OUT]
	MOV	ES,NFS
	MOV	AL,0DH
	STOSB
	MOV	AL,0AH
	STOSB
	POP	ES
	MOV	ES:[SELECT_OUT],DI
	POP	DI
	POP	AX
	ADD	WORD PTR ES:[NUMBER_OUTL],2
	ADC	WORD PTR ES:[NUMBER_OUTH],0
	RET
ENDP
PRINT_OUT	PROC
	PUSHF
	PUSHA
	PUSH	DS
	PUSH	ES
	MOV	ES,DATS
	TEST	BYTE PTR ES:[FLAGS],10000B
	JZ	PRINTOFE
	TEST	BYTE PTR ES:[FLAGS],1
	JZ	PRINTOSF
	CALL	PRINT_OUT_FILE
	JMP	SHORT	PRINTOFE
PRINTOSF:
	CALL	PRINT_OUT_SCREEN
PRINTOFE:
	POP	ES
	POP	DS
	POPA
	POPF
	RET
ENDP
PRINT_OUT_SCREEN	PROC
	MOV	DS,NFS
	MOV	CX,ES:[NUMBER_OUTH]
	OR	CX,CX
	JZ	PRINTOS4
	XOR	CX,CX
	CALL	PRINTOS
	MOV	AX,DS
	ADD	AX,1000H
	MOV	DS,AX
PRINTOS4:
	TEST	BYTE PTR ES:[FLAGS],100000B
	JNZ	PRINTOS14
	PUSH	DS
	PUSH	ES
	POP	DS
	LEA	SI,NEIF
	CALL	WW
	LEA	SI,FBUF
	CALL	WW
	PUSH	SI
	LEA	SI,AND_
	CALL	WW
	POP	SI
	CALL	WW
	CALL	WENTER
	OR	BYTE PTR DS:[FLAGS],100000B
	POP	DS
PRINTOS14:
	MOV	CX,ES:[NUMBER_OUTL]
ENDP
PRINTOS PROC
	XOR	SI,SI
PRINTOS2:
	LODSB
	CALL	WS
	TEST	BYTE PTR ES:[FLAGS],1000B
	JZ	PRINTOS1
	CMP	AL,0DH
	JNZ	PRINTOS3
	INC	BX
PRINTOS3:
	CMP	BX,25
	JB	PRINTOS1
	XOR	BX,BX
	CALL	INKEY
PRINTOS1:
	LOOP	PRINTOS2
	RET
ENDP
PRINT_OUT_FILE	PROC
	MOV	DS,DATS
	MOV	BX,DS:[NUMBER_OUTH]
	MOV	CX,DS:[NUMBER_OUTL]
	MOV	SI,DS:[SAVEF_NAME_ADRESS]
	PUSH	DS
	POP	ES
	MOV	DS,NFS
	XOR	DX,DX
	CALL	SAVE_FILE
	RET
ENDP
WENTER	PROC
	PUSH	AX
	MOV	AL,0DH
	CALL	WS
	MOV	AL,0AH
	CALL	WS
	POP	AX
	RET
ENDP
INCLUDE READLINE.LIB
INCLUDE INKEY.LIB
INCLUDE IO.LIB
INCLUDE WW.LIB
DATA_SEG	DW	DATA
FF_SEG		DW	FF
SF_SEG		DW	SF
NF_SEG		DW	NF
ENDS
DATA	SEGMENT PARA
TIRE	DB	' - ',0
CREDITS DB	'Compare utility 2.0 by Pavel A. Skrylev (C)1997',0dh,0ah,0
USING	DB	'   USAGE: compare [commands] <1st file> <2nd file> [outputfile]',0dh,0ah,0
ERRORF	DB	'Ошибка при работе с диском',0dh,0ah,0
FA	DB	'Файлы ',0
IDENT	DB	' идентичны',0DH,0AH,0
NEIF	DB	'Различия в файлах ',0
AND_	DB	' и ',0
REP_	DB	'Отчет в файле ',0

LOWSELECTOR	DW	0
HIGHSELECTOR	DW	0

SELECT_OUT	DW	0
NUMBER_OUTL	DW	0
NUMBER_OUTH	DW	0

SAVEF_NAME_ADRESS	DW	0

SEL_L	DW	?
SEL_H	DW	?

LOG1	DW	0
LOG2	DW	0
LOG3	DW	0
FLAGS	DB	0
;0 - 1=OUTPUT TO FILE
;1 - 1=FIRSTZ USED
;2 - 1=SECOND NOT EQUALLY
;3 - 1=PAUSE MODE
;4 - 1=first not equal
;5 - 1=различия в файлах написаны
FT1	DB	'/Pp',0FFH
ST1	DB	0FFH
OUTT	DW	0
FBUF	DB	3*13	 DUP	 (0)
EDS	DB	?
ENDS
END	START
